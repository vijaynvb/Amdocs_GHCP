
1. Refactor codebase 
    1. Attention []
2. Run Java code
3. Integrate with mongodb database
4. MongoDB extension
    1. vs code extension [jira, confluence]
    2. copilot extension
5. MCP
6. MongoDB MCP 
    Cluster of DB -> Sharding, Replication, Backup, Restore
7. Figma MCP [Optional] [UI/UX design]
    1. react application.
8. Custom MCP server implementation 
    MCP server ->  [Confluence] Rest endpoint
9. Integration with copilot
10. github -> Pull Request Management and Peer Review [copilot]
11. Global Extensions
12. Security and compliances


1. Functional prgrmaing 
    -> C C++ 
    -> Java 8 

    function(parametes){
        no other context 
        Response
    }  

2. Commanda to execute java code: 

    1. build the jar file:
        mvn clean package spring-boot:repackage

    2. Run the jar file:
        java -jar target/java-customer-billing-0.0.1-SNAPSHOT.jar

    3. access the application:
        Open your web browser and navigate to http://localhost:8080/api/customers to access the application.


3. MongoDB Docker Command:
    docker run -d -p 27017:27017 --name mongo mongo:latest 

    mongodb://localhost:27017/mongo

4. Java docs [create comments and generate java docs]

5. MCP [Concepts]
    1. MCP Server: 
        1. Tool [mongodb, atlasian, jira, confluence]
        2. Agent [AI Services[Document extraction, speech to text, text to speech, image recognition], Copilot]

6. Remote MCP [Mongodb MCP]

7. Custom MCP implementation [Nodejs]


orcastrator -> mcp client -> mcp server -> tool/agent 

add 3+5
    1. Orcastrator -> brain-llm 
    2. orcastrator -> 
        steps -> add [picks the tool] values 